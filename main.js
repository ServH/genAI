/**
 * GenAI - Archivo Principal
 * CAJA 1 - Fase 1.0: Setup Inicial
 * 
 * Punto de entrada del juego
 */

// El engine se crea autom√°ticamente en Engine.js

/**
 * Inicializa el juego cuando el DOM est√° listo
 */
document.addEventListener('DOMContentLoaded', () => {
    console.log('Iniciando GenAI...');
    console.log(`Versi√≥n: ${CONSTANTS.VERSION}`);
    console.log(`Fase: ${CONSTANTS.CURRENT_PHASE}`);
    
    // El engine se inicializa autom√°ticamente
    console.log('GenAI iniciado exitosamente');
});

/**
 * Maneja errores cr√≠ticos mostr√°ndolos al usuario
 */
function showError(message) {
    const gameContainer = document.getElementById('game-container');
    gameContainer.innerHTML = `
        <div style="
            display: flex;
            justify-content: center;
            align-items: center;
            height: 100vh;
            color: #ff4444;
            font-family: 'Courier New', monospace;
            text-align: center;
            background: #0a0e27;
        ">
            <div>
                <h2>Error</h2>
                <p>${message}</p>
                <p style="margin-top: 20px; font-size: 12px; opacity: 0.7;">
                    Revisa la consola para m√°s detalles
                </p>
            </div>
        </div>
    `;
}

/**
 * Limpia recursos al cerrar la p√°gina
 */
window.addEventListener('beforeunload', () => {
    if (window.gameEngine) {
        window.gameEngine.destroy();
        console.log('Recursos limpiados');
    }
});

/**
 * Maneja errores no capturados
 */
window.addEventListener('error', (event) => {
    console.error('Error no capturado:', event.error);
});

/**
 * Maneja promesas rechazadas
 */
window.addEventListener('unhandledrejection', (event) => {
    console.error('Promesa rechazada:', event.reason);
});

// Informaci√≥n de debug en consola
console.log(`
üîÑ GenAI - CAJA 3 Fase 3.1: Sincronizaci√≥n Bidireccional de Reproducci√≥n
================================================================
üö® PROBLEMA CR√çTICO SOLUCIONADO:
- Referencias perdidas: Criaturas llegaban a MATING pero perd√≠an pareja
- Bucles infinitos: Estados MATING "sin pareja" causaban loops
- Falta sincronizaci√≥n: Una criatura ten√≠a target pero la otra no

üîÑ SINCRONIZACI√ìN BIDIRECCIONAL IMPLEMENTADA:
- Verificaci√≥n completa antes de reproducci√≥n
- Ambas criaturas deben reconocerse mutuamente
- Transici√≥n sincronizada a estado MATING
- Limpieza autom√°tica de referencias inconsistentes

üõ†Ô∏è CORRECCIONES T√âCNICAS:
- attemptReproduction(): Verificaci√≥n bidireccional completa
- synchronizeMatingTransition(): Cambio simult√°neo a MATING
- clearMatingReferences(): Reset autom√°tico de estados inconsistentes
- Logs diagn√≥sticos: Informaci√≥n clara de sincronizaci√≥n

üéØ REPRODUCCI√ìN AHORA FUNCIONAL:
- Referencias bidireccionales verificadas
- Transiciones sincronizadas
- Estados consistentes
- ¬°Nacimientos finalmente posibles!

Controles: D = Debug con estad√≠sticas reproducci√≥n, G = Grid, Espacio = Pausa
================================================================
`); 